Comno uso import { useEffect, useState } from 'react';
import { Platform } from 'react-native';
import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import { carrilesURL } from '../API/urlsApi';
import { editarElemento } from '../Hooks/CRUDHooks';

function usePushNotificationCamionPendiente() {
  const [isNotifying, setIsNotifying] = useState(false);

  const sendPushNotificationCamionPendiente = async (numCarril) => {
    if (isNotifying) {
      return;
    }

    setIsNotifying(true);

    if (Device.isDevice) {
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;
      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }
      if (finalStatus !== 'granted') {
        alert('Failed to get push token for push notification!');
        setIsNotifying(false);
        return;
      }

      const notificationId = numCarril.toString(); // Use numCarril como identificador Ãºnico

      await Notifications.scheduleNotificationAsync({
        content: {
          title: `Se a detectado ingreso de camion a carril ðŸ“¬ ${numCarril}`,
          body: 'Carril pendiente a asignacion',
          data: { data: 'goes here' },
        },
        trigger: { seconds: 2 },
        identifier: notificationId, // Usa el identificador Ãºnico
      });

      // Espera a que se reciba la respuesta de la notificaciÃ³n
      const response = await Notifications.waitForNotificationResponseAsync();

      if (response.notification.request.identifier === notificationId) {
        // Solo marca como notificado si la respuesta pertenece a la notificaciÃ³n actual
        await editarElemento(carrilesURL, numCarril, `notificar`);
      }
    } else {
      alert('Must use physical device for Push Notifications');
    }

    setIsNotifying(false);
  };

  return sendPushNotificationCamionPendiente;
}

export default usePushNotificationCamionPendiente;
en este componente para reemplazar: import axios from "axios";
import { useCallback, useEffect } from "react";
import { carrilesURL } from "../API/urlsApi";
import { sendPushNotificationCamionPendiente } from "../screens/MenNot";

export function useListarElementos(url, dato, setDatos) {
  const ListarCarriles = async () => {
    try {
      const response = await axios.get(url);
      setDatos(response.data);
      const da = response.data;
      da.forEach(async (d) => {
        if (!d.notificar && d.estadosModel.id === 2) {
          await axios.get(`${carrilesURL}/${d.id}`).then(async (response) => {
            const elemento = response.data;
            elemento[`notificar`] = true;
            await axios.put(`${carrilesURL}/${d.id}`, elemento).then(() => {
              sendPushNotificationCamionPendiente(d.id)

            });
          });
        }
      });
    } catch (error) {
      console.error("Error al obtener los datos:", error);
    }
  };
/*
  useEffect(() => {
    const intervalId = setInterval(ListarCarriles, 1500); // Llama a ListarCarriles cada 1 segundo
    ListarCarriles()
    return () => {
      clearInterval(intervalId); // Limpia el intervalo cuando el componente se desmonta
    };
  }, []);
  */

  useEffect(() => {
    ListarCarriles();
  }, [ListarCarriles]);
  return dato;

}

export function editarElemento(url, id, est) {
  const nurl = `${url}/${id}`;

  axios.get(nurl).then((response) => {
    const elemento = response.data;

    elemento[est] = true;

    axios.put(nurl, elemento).then(() => {
      console.log(elemento);
    });
  });
}
